---
globs: **/*.sh,*.sh
alwaysApply: false
---
# Bash Guidelines

Fail fast, quote everything, test thoroughly.

## Critical Safety

**Always start with:**
```bash
#!/usr/bin/env bash
set -euo pipefail
# Exit on error, undefined vars, pipeline failures
```

**POSIX compatibility:** Use `#!/bin/sh` and `set -eu` (no pipefail)

## Quoting Rules

**Quote everything by default:**
```bash
# ✓ Safe
rm "$filename"
result=$(command "$arg1" "$arg2")

# ✗ Breaks on spaces
rm $filename
```

**Arrays for word splitting:**
```bash
flags=(-la -h)
ls "${flags[@]}"  # Proper expansion
```

## Error Handling

```bash
# ✓ Check commands
if ! mkdir -p "$dir"; then
    echo "Error: Failed to create $dir" >&2
    exit 1
fi

# ✓ Cleanup trap
cleanup() { rm -f "$temp_file"; }
trap cleanup EXIT INT TERM
```

## Functions

```bash
# ✓ Use local scope, return codes (not exit)
validate_dir() {
    local dir="$1"
    [ -d "$dir" ] || return 1
    [ -w "$dir" ] || return 1
}
```

## Test Operators

```bash
# Bash: [[ ]] with regex
if [[ -f "$file" && "$string" =~ ^[0-9]+$ ]]; then

# POSIX: [ ]
if [ -f "$file" ]; then
```

Common: `-f` file, `-d` dir, `-r` readable, `-w` writable, `-z` empty, `-n` non-empty

## Anti-Patterns

**Never do:**
```bash
# ✗ Parse ls
for file in $(ls *.txt); do

# ✗ Unquoted variables
rm $file

# ✗ exit in functions (terminates entire script)
my_func() { exit 1; }

# ✗ Useless cat
cat file | grep pattern  # Use: grep pattern file
```

## Safe Iteration

```bash
# ✓ Files
for file in *.txt; do
    [ -f "$file" ] || continue
    process "$file"
done

# ✓ Lines (handles spaces)
while IFS= read -r line; do
    echo "$line"
done < "$file"
```

## NixOS Integration

```nix
# Module scripts use store paths
systemd.services.my-service.script = ''
  ${pkgs.curl}/bin/curl https://example.com
'';
```

```bash
# Standalone with nix-shell
#!/usr/bin/env nix-shell
#!nix-shell -i bash -p curl jq
```

## Essential Tools

- **ShellCheck:** `shellcheck script.sh` - catches bugs before runtime
- **Parameter expansion:** `${var:-default}`, `${file%.*}` (remove ext)

## Template

```bash
#!/usr/bin/env bash
set -euo pipefail

readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

main() {
    local input="$1"
    echo "Processing: $input"
}

main "$@"
```
