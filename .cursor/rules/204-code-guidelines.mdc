---
alwaysApply: true
---
# Balanced Code Guidelines

Pragmatic code that's easy to change. Context determines correctness. Ship working software.

## Core Principles

**Optimize for change:** Make code easy to modify > current elegance. Readability for team > personal cleverness.

**Question dogma:** If a principle makes code harder to understand, you're misapplying it. Perfect is enemy of good.

## Critical Patterns

**Naming:** Reveal intent. Avoid generic terms (`data`, `handler`, `manager` without context). Names >4 words signal abstraction problems.

**Functions:** One concept per function. Split when: can't name clearly, mix abstraction levels, or need scrolling to understand. Target <20 lines.

**Duplication:** Wrong abstraction costs more than duplication. Wait for 3rd instance before abstracting. Tolerate duplication when code might evolve differently.

**Comments:** Document why, not what. Explain business rules, non-obvious choices, performance trade-offs. Code should show what it does.

**Side Effects:** Isolate at boundaries. Pure functions at core. Name signals intent: `save_*`, `update_*`, `send_*`.

**Testing:** Test behavior, not implementation. Integration > heavy mocking. Delete tests providing no value.

## Anti-Patterns to Avoid

**Clean Code Zealot:** Fragments simple operations excessively, values principles over practicality.

**DRY Fundamentalist:** Eliminates coincidental duplication, creates premature abstractions.

**Architecture Astronaut:** Builds for problems you don't have, adds needless indirection.

## Refactoring

Refactor before adding features that would be easier with better structure. Don't refactor code that works and rarely changes.

**Sequence:** Make it work → Make it testable → Make it maintainable (only as needed) → Make it fast (only if measured slow)

## Architecture Red Flags

- Deep inheritance (>2 levels)
- Design patterns without justification
- "Enterprise" patterns in small projects
- Abstract base classes without clear benefit

## Golden Rule

Write for the maintainer—often future you. Will someone understand this in 6 months? Can they change it without breaking things?

Follow language idioms and team conventions. Consistency within project > perfect style. Shipping > philosophy.
