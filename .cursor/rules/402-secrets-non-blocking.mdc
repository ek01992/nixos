---
globs: ["hosts/*/default.nix", "hosts/*/secrets.yaml", ".sops.yaml"]
description: Non-blocking secrets management with graceful degradation
---

# Secrets: Non-Blocking Pattern

**Services must work with or without secrets. Never block builds or deployments.**

## Core Principle

**Graceful Degradation:**
- Secret exists → Automated behavior
- Secret missing → Manual workflow required
- System builds either way ✓

## Non-Blocking Pattern

```nix
# ✅ CORRECT: Service works with or without secret
services.tailscale = {
  enable = true;
  
  # Only use auth key if:
  # 1. Feature enabled (cfg.useAuthKeyFile)
  # 2. Secret exists in sops config
  authKeyFile = lib.mkIf (
    cfg.useAuthKeyFile && 
    (config.sops.secrets ? tailscale-auth)
  ) config.sops.secrets.tailscale-auth.path;
};
```

**Behavior:**
- Secret configured → Automated authentication
- Secret missing → Service starts, requires manual `sudo tailscale up`
- System builds either way → Non-blocking ✓

## Critical API Fix

**Current Bug** (`hosts/xps/default.nix`):
```nix
# ❌ WRONG API (will be fixed when ready):
age.sshKeyPaths = ["/etc/ssh/ssh_host_ed25519_key"]
```

**Correct API**:
```nix
# ✅ CORRECT API:
age.keyFile = "/etc/ssh/ssh_host_ed25519_key"
```

**Fix Commands** (when ready to implement):
```bash
sed -i 's/age.sshKeyPaths = \["/age.keyFile = "/' hosts/xps/default.nix
sed -i 's/"\];/";/' hosts/xps/default.nix
```

## Implementation Strategy

### Phase 1: Foundation (Already Correct)
✅ `.sops.yaml` structure perfect  
✅ Age keys configured properly  
✅ File encryption working

### Phase 2: Non-Blocking Services
```nix
# Pattern for any service using secrets
myService = {
  enable = true;
  
  # Graceful secret handling
  secretFile = lib.mkIf (
    cfg.useSecret && 
    (config.sops.secrets ? my-secret)
  ) config.sops.secrets.my-secret.path;
  
  # Fallback behavior when secret missing
  fallbackMode = lib.mkIf (!cfg.useSecret) "manual";
};
```

### Phase 3: Expansion (When Ready)
```bash
# 1. Verify current secret works
sudo sops -d hosts/xps/secrets.yaml

# 2. Add new secrets
sops hosts/xps/secrets.yaml
# Add: database-password, api-token, etc.

# 3. Use in config
sops.secrets = {
  tailscale-auth = { owner = "root"; };
  database-password = { owner = "postgres"; };
  api-token = { owner = "myapp"; };
};

# 4. Reference in services
services.myapp.envFile = config.sops.secrets.api-token.path;
```

## Testing Non-Blocking Behavior

```bash
# Test with secret
sudo sops -d hosts/xps/secrets.yaml  # Should work
sudo nixos-rebuild switch --flake .#xps
ls /run/secrets/tailscale-auth  # Should exist

# Test without secret (comment out sops block)
# sudo nixos-rebuild switch --flake .#xps
# systemctl status tailscaled  # Should start but not auto-auth
```

## Anti-Patterns

❌ **Blocking on Missing Secrets**
```nix
# BAD: Breaks build if secret missing
authKeyFile = config.sops.secrets.tailscale-auth.path;
```

❌ **Hardcoded Secret Paths**
```nix
# BAD: No graceful handling
authKeyFile = "/run/secrets/tailscale-auth";
```

## Benefits

- **Deployable**: System builds without secrets
- **Flexible**: Can add secrets later
- **Robust**: Handles missing secrets gracefully
- **Secure**: Secrets encrypted at rest

## Enforcement

Before accepting secret-using modules:
1. Service starts without secret
2. Graceful degradation to manual mode
3. Clear documentation of fallback behavior
4. No build failures on missing secrets

See report lines 287-385 for complete secrets workflow.