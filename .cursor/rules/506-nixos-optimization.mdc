---
alwaysApply: true
description: Performance and security best practices
---
# NixOS Performance & Best Practices (2025)
## Build Output Monitoring
```nix
# configuration.nix
environment.systemPackages = [ pkgs.nix-output-monitor ];

# Alias in shell config
nix-rebuild = "nixos-rebuild switch --flake . 2>&1 | nom";
```
Usage:
```bash
# Any nix command
nix build .#package 2>&1 | nom
nix develop --command cargo build 2>&1 | nom
# Shows:
# - Build progress with timing
# - Dependency tree
# - Failed derivations clearly
# - Summary statistics
```
## Security Best Practices
### Allowlist Unfree Packages
```nix
# ✗ Avoid: Too permissive
nixpkgs.config.allowUnfree = true;

# ✓ Prefer: Explicit per-package
nixpkgs.config.allowUnfreePredicate = pkg:
  builtins.elem (pkgs.lib.getName pkg) [
    "vscode"
    "slack"
    "nvidia-x11"
  ];

# Alternative: Per-package in list
nixpkgs.config.allowUnfreePredicate = pkg:
  builtins.elem (pkgs.lib.getName pkg) config.allowedUnfree;

allowedUnfree = [ "vscode" "slack" ];
```
### Secret Management
**Modern approaches:**
```nix
# Option 1: agenix (simpler, age-based)
{
  inputs.agenix.url = "github:ryantm/agenix";

  outputs = { agenix, ... }: {
    nixosConfigurations.hostname = {
      modules = [
        agenix.nixosModules.default
        {
          age.secrets.mySecret = {
            file = ./secrets/mySecret.age;
            owner = "username";
            mode = "0400";
          };

          # Use: config.age.secrets.mySecret.path
        }
      ];
    };
  };
}

# Option 2: sops-nix (more features, complex)
{
  inputs.sops-nix.url = "github:Mic92/sops-nix";

  outputs = { sops-nix, ... }: {
    modules = [
      sops-nix.nixosModules.sops
      {
        sops = {
          defaultSopsFile = ./secrets.yaml;
          age.keyFile = "/persistent/etc/sops/age/keys.txt";
          secrets.database-password = {
            owner = "postgres";
          };
        };
      }
    ];
  };
}
```
Choice: agenix for solo admin (simpler), sops-nix for team (more features).
## Filesystem Performance
**Recommended for Nix workloads:**
```nix
# For desktop /nix/store
fileSystems."/nix" = {
  device = "/dev/disk/by-label/nix";
  fsType = "f2fs";
  options = [ "compress_algorithm=zstd" "compress_chksum" "atgc" ];
};
```
Why f2fs:
- Faster than btrfs for Nix build workloads
- Good compression (saves space)
- No need for btrfs snapshots (generations handle this)
Alternative: XFS for servers, ZFS if needing snapshots for other reasons.
## Configuration Anti-Patterns
**Avoid:**
```nix
# Global 'with'
with pkgs; [ firefox vim ]  # Debugging nightmare

# Deprecated options
services.xserver.enable = true;  # Check for warnings

# Imperative fixes
# $ nix-env -iA nixos.package  # Use config instead

# Unnecessary overlays
nixpkgs.overlays = [ /* simple version override */ ];
# Consider: just specify version in package attribute
```
**Prefer:**
```nix
# Explicit references
environment.systemPackages = [
  pkgs.firefox
  pkgs.vim
];

# Modern options
services.xserver.enable = false;  # Use specific display managers
services.displayManager.sddm.enable = true;

# Declarative packages
environment.systemPackages = [ pkgs.package ];

# Upstream contributions over overlays
# Submit version bumps to nixpkgs
```
## Debugging Workflow (Modern Commands)
```bash
# Syntax validation
nix-instantiate --parse file.nix
# Evaluate expression
nix eval .#nixosConfigurations.hostname.config.services.nginx
# Trace evaluation (add to code)
builtins.trace "value: ${value}" expression
# Build logs
nix log .#package
# or: nix log /nix/store/hash-package
# Derivation inspection
nix derivation show .#package
# Dependency analysis
nix why-depends /run/current-system /nix/store/hash-package
nix-store -q --tree /run/current-system
# Store optimization
nix store optimise  # Deduplicate (can save GB)
nix store gc        # Remove unused
nix store gc --print-dead  # Preview what would be removed
```
## Flake Templates
```bash
# See available templates
nix flake show templates
# Initialize from template
nix flake init -t github:NixOS/templates#full
# Custom template repository
nix flake init -t github:yourusername/templates#nixos-desktop
```
## Essential Resources
- Options: https://search.nixos.org/options
- Packages: https://search.nixos.org/packages
- Nix Pills: https://nixos.org/guides/nix-pills/
- Community: discourse.nixos.org
- Weekly education: YouTube "Nix Hour" (@Infinisil)
