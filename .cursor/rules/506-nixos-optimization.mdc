---
alwaysApply: true
description: Performance and security best practices
---
# NixOS Performance & Best Practices

## Security Anti-Patterns
**Never use global allowUnfree:**
```nix
# ✗ Avoid: Too permissive
nixpkgs.config.allowUnfree = true;

# ✓ Prefer: Explicit allowlist
nixpkgs.config.allowUnfreePredicate = pkg:
  builtins.elem (pkgs.lib.getName pkg) [
    "vscode" "slack" "nvidia-x11"
  ];
```

## Configuration Anti-Patterns
**Avoid:**
- Global `with pkgs;` (debugging nightmare)
- `nix-env -iA nixos.package` on NixOS (breaks declarative model)
- Deprecated options (check warnings)

**Prefer:**
- Explicit `pkgs.package` references
- Declarative `environment.systemPackages`
- Modern options over deprecated ones

## Essential Debug Commands
```bash
nix flake check          # Syntax validation
nix log .#package        # Build logs
nix why-depends /run/current-system /nix/store/hash-package
nix store optimise       # Deduplicate (can save GB)
```

## Build Monitoring
Use `nom` (nix-output-monitor) for better build output:
```bash
nix build . 2>&1 | nom
```

**Detailed patterns:** See [NIXOS-PATTERNS.md](NIXOS-PATTERNS.md)
