---
globs: flake.nix
alwaysApply: false
description: Advanced flake patterns and techniques
---
# Advanced Flake Patterns

## Cherry-Pick Unmerged PRs
**Apply patches from open PRs before merge.**

```nix
# flake.nix
{
  inputs.nixpkgs.url = "github:NixOS/nixpkgs/nixos-unstable";

  outputs = { self, nixpkgs }:
    let
      patches = [
        {
          url = "https://patch-diff.githubusercontent.com/raw/NixOS/nixpkgs/pull/292148.diff";
          hash = "sha256-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=";
          # Put dummy hash, get real from error message
        }
      ];

      system = "x86_64-linux";
      pkgs = import nixpkgs { inherit system; };

      patchedNixpkgs = pkgs.applyPatches {
        name = "nixpkgs-patched";
        src = nixpkgs;
        patches = map pkgs.fetchpatch patches;
      };
    in {
      nixosConfigurations.hostname =
        (import "${patchedNixpkgs}/nixos/lib/eval-config.nix") {
          inherit system;
          modules = [ ./configuration.nix ];
        };
    };
}
```

**Auto-detection**: When PR merges, patch fails â†’ reminder to remove.

## DevShell Pattern
**Reproducible development environments:**
```nix
# flake.nix
{
  outputs = { nixpkgs, ... }: {
    devShells.x86_64-linux.default =
      let pkgs = import nixpkgs { system = "x86_64-linux"; };
      in pkgs.mkShell {
        packages = with pkgs; [
          nodejs python3 postgresql
        ];
        shellHook = ''
          echo "Development environment loaded"
          export DATABASE_URL="postgresql://localhost/dev"
        '';
      };
  };
}
```

## REPL Exploration
```bash
# Enter REPL with flake
nix repl
:lf .  # or :load-flake (shorter alias)
# Tab completion available
outputs.nixosConfigurations.<TAB>
```

**Detailed patterns:** See [NIXOS-PATTERNS.md](NIXOS-PATTERNS.md)
